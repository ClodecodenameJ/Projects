
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author romua
 */
public class AirconUi extends javax.swing.JFrame implements Runnable {

    int hour, second, minute;

    /**
     * Creates new form AirconUi
     */
    public AirconUi() {
        initComponents();
        refresher();
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    DateTimeFormatter hoursCounter;
    int hoursCounterN = 0;
    String Zone = "rooms", temp = "";
    boolean Rcheck = false, Kcheck = false, Lcheck = false, lock = false, breaker = false;

    ArrayList<String> AdvanceSettings = new ArrayList<String>();
    TempSetter rooms = new TempSetter();
    TempSetter kitchen = new TempSetter();
    TempSetter livingroom = new TempSetter();
    DecimalFormat df = new DecimalFormat("#");
    String Password = "15245212635632", TypedPassword = "";
    int dayDisplay = 0, hourDisplay = 0;

    public void advanceTempSetter(String temp) {

        if (Zone == "rooms") {
            if (rooms.getTempType() == "C") {
                rooms.setDesiredTemperature(Double.parseDouble(temp));
            } else if (rooms.getTempType() == "F") {
                rooms.setTemperatureOutside((Double.parseDouble(temp) * 9 / 5) + 32);
            }

        } else if (Zone == "kitchen") {
            if (kitchen.getTempType() == "C") {
                kitchen.setDesiredTemperature(Double.parseDouble(temp));
            } else if (kitchen.getTempType() == "F") {
                kitchen.setTemperatureOutside((Double.parseDouble(temp) * 9 / 5) + 32);
            }
        } else if (Zone == "livingroom") {
            if (livingroom.getTempType() == "C") {
                livingroom.setDesiredTemperature(Double.parseDouble(temp));
            } else if (livingroom.getTempType() == "F") {
                livingroom.setTemperatureOutside((Double.parseDouble(temp) * 9 / 5) + 32);
            }
        }
        refresher();

    }

    public void outsideTempSetterMethod(double temp) {
        if (rooms.getTempType() == "C") {
            rooms.setTemperatureOutside(temp);
        } else if (rooms.getTempType() == "F") {
            rooms.setTemperatureOutside((temp * 9 / 5) + 32);
        }
        if (kitchen.getTempType() == "C") {
            kitchen.setTemperatureOutside(temp);
        } else if (kitchen.getTempType() == "F") {
            kitchen.setTemperatureOutside((temp * 9 / 5) + 32);
        }
        if (livingroom.getTempType() == "C") {
            livingroom.setTemperatureOutside(temp);
        } else if (livingroom.getTempType() == "F") {
            livingroom.setTemperatureOutside((temp * 9 / 5) + 32);
        }

    }

    public void outsideTempSetter() {
        switch (hoursCounterN) {
            case 1:
                outsideTempSetterMethod(20);
                break;
            case 2:
                outsideTempSetterMethod(20);
                break;
            case 3:
                outsideTempSetterMethod(19);
                break;
            case 4:
                outsideTempSetterMethod(20);
                break;
            case 5:
                outsideTempSetterMethod(21);
                break;
            case 6:
                outsideTempSetterMethod(23);
                break;
            case 7:
                outsideTempSetterMethod(24);
                break;
            case 8:
                outsideTempSetterMethod(26);
                break;
            case 9:
                outsideTempSetterMethod(27);
                break;
            case 10:
                outsideTempSetterMethod(29);
                break;
            case 11:
                outsideTempSetterMethod(30);
                break;
            case 12:
                outsideTempSetterMethod(33);
                break;
            case 13:
                outsideTempSetterMethod(31);
                break;
            case 14:
                outsideTempSetterMethod(29);
                break;
            case 15:
                outsideTempSetterMethod(29);
                break;
            case 16:
                outsideTempSetterMethod(28);
                break;
            case 17:
                outsideTempSetterMethod(27);
                break;
            case 18:
                outsideTempSetterMethod(26);
                break;
            case 19:
                outsideTempSetterMethod(25);
                break;
            case 20:
                outsideTempSetterMethod(24);
                break;
            case 21:
                outsideTempSetterMethod(24);
                break;
            case 22:
                outsideTempSetterMethod(23);
                break;
            case 23:
                outsideTempSetterMethod(22);
                break;
            case 24:
                outsideTempSetterMethod(21);
                break;

        }
    }

    public void tempSetter() {

        if (rooms.getDesiredTemperature() > rooms.getTemperatureInside()) {
            rooms.increaseTemperatureInside();
            Rcheck = false;
        } else if (rooms.getDesiredTemperature() < rooms.getTemperatureInside()) {
            rooms.decreaseTemperatureInside();
            Rcheck = false;
        } else if (rooms.getDesiredTemperature() == rooms.getTemperatureInside()) {
            Rcheck = true;
            System.out.println(Rcheck);
        }
        if (kitchen.getDesiredTemperature() > kitchen.getTemperatureInside()) {
            kitchen.increaseTemperatureInside();
            Kcheck = false;
        } else if (kitchen.getDesiredTemperature() < kitchen.getTemperatureInside()) {
            kitchen.decreaseTemperatureInside();
            Kcheck = false;

        } else if (kitchen.getDesiredTemperature() == kitchen.getTemperatureInside()) {
            Kcheck = true;

        }

        if (livingroom.getDesiredTemperature() > livingroom.getTemperatureInside()) {
            livingroom.increaseTemperatureInside();
            Lcheck = false;
        } else if (livingroom.getDesiredTemperature() < livingroom.getTemperatureInside()) {
            livingroom.decreaseTemperatureInside();
            Lcheck = false;
        } else if (livingroom.getDesiredTemperature() == livingroom.getTemperatureInside()) {
            Lcheck = true;

        }
    }

    public void tempLimiter() {
        IncreaseTemp.setVisible(true);
        DecreaseTemp.setVisible(true);
        if (Zone == "rooms") {
            if (rooms.getTempType() == "F" && rooms.getDesiredTemperature() <= 60.8) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            } else if (rooms.getTempType() == "C" && rooms.getDesiredTemperature() <= 16) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            }
            if (rooms.getTempType() == "F" && rooms.getDesiredTemperature() >= 89.6) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            } else if (rooms.getTempType() == "C" && rooms.getDesiredTemperature() >= 32) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            }
        } else if (Zone == "kitchen") {
            if (kitchen.getTempType() == "F" && kitchen.getDesiredTemperature() <= 60.8) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            } else if (kitchen.getTempType() == "C" && kitchen.getDesiredTemperature() <= 16) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            }
            if (kitchen.getTempType() == "F" && kitchen.getDesiredTemperature() >= 89.6) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            } else if (kitchen.getTempType() == "C" && kitchen.getDesiredTemperature() >= 32) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            }
        } else if (Zone == "livingroom") {
            if (livingroom.getTempType() == "F" && livingroom.getDesiredTemperature() <= 60.8) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            } else if (livingroom.getTempType() == "C" && livingroom.getDesiredTemperature() <= 16) {
                IncreaseTemp.setVisible(true);
                DecreaseTemp.setVisible(false);
            }
            if (livingroom.getTempType() == "F" && livingroom.getDesiredTemperature() >= 89.6) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            } else if (livingroom.getTempType() == "C" && livingroom.getDesiredTemperature() >= 32) {
                IncreaseTemp.setVisible(false);
                DecreaseTemp.setVisible(true);
            }

        }

    }

    public void modeSelector() {
        if (Zone == "rooms") {
            if (rooms.getTempType() == "F" && rooms.getDesiredTemperature() < 78 && rooms.getMode() != "off" || rooms.getTempType() == "C" && rooms.getDesiredTemperature() < 26 && rooms.getMode() != "off") {
                rooms.setMode("cool");
            } else if (rooms.getTempType() == "F" && rooms.getDesiredTemperature() > 79 && rooms.getMode() != "off" || rooms.getTempType() == "C" && rooms.getDesiredTemperature() > 26 && rooms.getMode() != "off") {
                rooms.setMode("heat");
            } else {
                rooms.setMode("off");
            }

        } else if (Zone == "kitchen") {
            if (kitchen.getTempType() == "F" && kitchen.getDesiredTemperature() < 78 && rooms.getMode() != "off" || kitchen.getTempType() == "C" && kitchen.getDesiredTemperature() < 26 && rooms.getMode() != "off") {
                kitchen.setMode("cool");
            } else if (kitchen.getTempType() == "F" && kitchen.getDesiredTemperature() > 79 && rooms.getMode() != "off" || kitchen.getTempType() == "C" && kitchen.getDesiredTemperature() > 26 && rooms.getMode() != "off") {
                kitchen.setMode("heat");
            } else {
                kitchen.setMode("off");
            }
        } else if (Zone == "livingroom") {
            if (livingroom.getTempType() == "F" && livingroom.getDesiredTemperature() < 78 && rooms.getMode() != "off" || livingroom.getTempType() == "C" && livingroom.getDesiredTemperature() < 26 && rooms.getMode() != "off") {
                livingroom.setMode("cool");
            } else if (livingroom.getTempType() == "F" && livingroom.getDesiredTemperature() > 79 && rooms.getMode() != "off" || livingroom.getTempType() == "C" && livingroom.getDesiredTemperature() > 26 && rooms.getMode() != "off") {
                livingroom.setMode("heat");
            } else {
                livingroom.setMode("off");
            }
        }

    }

    public void PasswordTyper() {
        String PasswordToAsterisk = "";
        for (int i = 0; i < TypedPassword.length(); i++) {
            PasswordToAsterisk += "*";
        }

        PSDisplay.setText(PasswordToAsterisk);
        PasswordToAsterisk = "";
    }

    public void refresher() {
        tempLimiter();
        modeSelector();
        PasswordTyper();
        HourDisplay.setText(Integer.toString(hourDisplay));
        DayDisplay.setText(Integer.toString(dayDisplay));

        if (lock) {
            Timer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TimerIcon.png")));
        } else {
            Timer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TimerIconAD.png")));
        }

        try {
            if (Zone == "rooms") {
                TemperatureDisplay.setText(df.format(rooms.getDesiredTemperature()) + "°");
                TemperatureOutsideInfo.setText(df.format(rooms.getTemperatureOutside()) + "°");
                TemperatureInsideInfo.setText(df.format(rooms.getTemperatureInside()) + "°");

                Rooms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/RoomsOverlay.png")));
                Kitchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/kitchen.png")));
                LivingRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LivingRoom.png")));
                if (rooms.getTempType() == "F") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconF.png")));
                } else if (rooms.getTempType() == "C") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconC.png")));
                }
                if (rooms.getMode() == "heat") {
                    ModeDisplay.setText("Heating");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIconOverlay.png")));
                } else if (rooms.getMode() == "cool") {
                    ModeDisplay.setText("Cooling");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIconOverlay.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else if (rooms.getMode() == "off") {
                    ModeDisplay.setText("Off");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIconOverlay.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else {
                    ModeDisplay.setText(" ");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                }
                if (rooms.getFan() == "auto") {
                    FanDisplay.setText("Fan Auto");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIconOverlay.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                } else if (rooms.getFan() == "on") {
                    FanDisplay.setText("Fan On");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIconOverlay.png")));
                } else {
                    FanDisplay.setText(" ");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                }
            } else if (Zone == "kitchen") {

                TemperatureDisplay.setText(df.format(kitchen.getDesiredTemperature()) + "°");
                TemperatureOutsideInfo.setText(df.format(kitchen.getTemperatureOutside()) + "°");
                TemperatureInsideInfo.setText(df.format(kitchen.getTemperatureInside()) + "°");
                Rooms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/Rooms.png")));
                Kitchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/kitchenOverlay.png")));
                LivingRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LivingRoom.png")));
                if (kitchen.getTempType() == "F") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconF.png")));
                } else if (kitchen.getTempType() == "C") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconC.png")));
                }
                if (kitchen.getMode() == "heat") {
                    ModeDisplay.setText("Heating");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIconOverlay.png")));
                } else if (kitchen.getMode() == "cool") {
                    ModeDisplay.setText("Cooling");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIconOverlay.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else if (kitchen.getMode() == "off") {
                    ModeDisplay.setText("Off");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIconOverlay.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else {
                    ModeDisplay.setText(" ");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                }
                if (kitchen.getFan() == "auto") {
                    FanDisplay.setText("Fan Auto");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIconOverlay.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                } else if (kitchen.getFan() == "on") {
                    FanDisplay.setText("Fan Auto");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIconOverlay.png")));
                } else {
                    FanDisplay.setText(" ");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                }
            } else if (Zone == "livingroom") {
                TemperatureDisplay.setText(df.format(livingroom.getDesiredTemperature()) + "°");
                TemperatureOutsideInfo.setText(df.format(livingroom.getTemperatureOutside()) + "°");
                TemperatureInsideInfo.setText(df.format(livingroom.getTemperatureInside()) + "°");
                Rooms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/Rooms.png")));
                Kitchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/kitchen.png")));
                LivingRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LivingRoomOverlay.png")));
                if (livingroom.getTempType() == "F") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconF.png")));
                } else if (livingroom.getTempType() == "C") {
                    BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIconC.png")));
                }
                if (livingroom.getMode() == "heat") {
                    ModeDisplay.setText("Heating");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIconOverlay.png")));
                } else if (livingroom.getMode() == "cool") {
                    ModeDisplay.setText("Cooling");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIconOverlay.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else if (livingroom.getMode() == "off") {
                    ModeDisplay.setText("Off");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIconOverlay.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                } else {
                    ModeDisplay.setText(" ");
                    MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png")));
                    MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png")));
                    MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png")));
                }
                if (livingroom.getFan() == "auto") {
                    FanDisplay.setText("Fan Auto");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIconOverlay.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                } else if (livingroom.getFan() == "on") {
                    FanDisplay.setText("Fan On");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIconOverlay.png")));
                } else {
                    FanDisplay.setText(" ");
                    FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png")));
                    FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png")));
                }
            }

        } catch (Exception e) {
            System.out.println("error");
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TimerAdvanceSetterDiag = new javax.swing.JDialog();
        DayDisplay1 = new javax.swing.JLabel();
        HourDisplay = new javax.swing.JLabel();
        DayPlusPlus = new javax.swing.JButton();
        DayMinusMinus = new javax.swing.JButton();
        HoursMinusMinus = new javax.swing.JButton();
        HoursPlusPlus = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        DayDisplay = new javax.swing.JLabel();
        DayDisplay2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DesiredTempJtex = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AdminAcessDiag = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton0 = new javax.swing.JButton();
        jButtonCancle = new javax.swing.JButton();
        jButtonEnter = new javax.swing.JButton();
        PSDisplay = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        PCBG = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        FanDisplay = new javax.swing.JLabel();
        ModeDisplay = new javax.swing.JLabel();
        TimeDateLabel = new javax.swing.JLabel();
        TemperatureOutsideInfo = new javax.swing.JLabel();
        TemperatureInsideInfo = new javax.swing.JLabel();
        TemperatureDisplay = new javax.swing.JLabel();
        Timer = new javax.swing.JButton();
        Optimum = new javax.swing.JButton();
        FOnFan = new javax.swing.JButton();
        FAutoFan = new javax.swing.JButton();
        BTempType = new javax.swing.JButton();
        Rooms = new javax.swing.JButton();
        Kitchen = new javax.swing.JButton();
        LivingRoom = new javax.swing.JButton();
        DecreaseTemp = new javax.swing.JButton();
        IncreaseTemp = new javax.swing.JButton();
        MCool = new javax.swing.JButton();
        MOff = new javax.swing.JButton();
        MHeat = new javax.swing.JButton();
        LockIcon = new javax.swing.JButton();
        BG = new javax.swing.JLabel();

        TimerAdvanceSetterDiag.setLocationByPlatform(true);
        TimerAdvanceSetterDiag.setPreferredSize(new java.awt.Dimension(264, 315));
        TimerAdvanceSetterDiag.getContentPane().setLayout(null);

        DayDisplay1.setText("Day:");
        TimerAdvanceSetterDiag.getContentPane().add(DayDisplay1);
        DayDisplay1.setBounds(25, 92, 40, 40);

        HourDisplay.setText("12");
        HourDisplay.setPreferredSize(new java.awt.Dimension(30, 15));
        TimerAdvanceSetterDiag.getContentPane().add(HourDisplay);
        HourDisplay.setBounds(180, 92, 40, 40);

        DayPlusPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/PlusIcon.png"))); // NOI18N
        DayPlusPlus.setBorderPainted(false);
        DayPlusPlus.setContentAreaFilled(false);
        DayPlusPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayPlusPlusActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(DayPlusPlus);
        DayPlusPlus.setBounds(20, 10, 70, 70);

        DayMinusMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/MinusIcon.png"))); // NOI18N
        DayMinusMinus.setBorderPainted(false);
        DayMinusMinus.setContentAreaFilled(false);
        DayMinusMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayMinusMinusActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(DayMinusMinus);
        DayMinusMinus.setBounds(20, 141, 70, 70);

        HoursMinusMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/MinusIcon.png"))); // NOI18N
        HoursMinusMinus.setBorderPainted(false);
        HoursMinusMinus.setContentAreaFilled(false);
        HoursMinusMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoursMinusMinusActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(HoursMinusMinus);
        HoursMinusMinus.setBounds(155, 141, 70, 70);

        HoursPlusPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/PlusIcon.png"))); // NOI18N
        HoursPlusPlus.setBorderPainted(false);
        HoursPlusPlus.setContentAreaFilled(false);
        HoursPlusPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoursPlusPlusActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(HoursPlusPlus);
        HoursPlusPlus.setBounds(155, 10, 70, 70);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/SaveBtn.png"))); // NOI18N
        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(jButton10);
        jButton10.setBounds(160, 220, 80, 50);

        DayDisplay.setText("31");
        TimerAdvanceSetterDiag.getContentPane().add(DayDisplay);
        DayDisplay.setBounds(52, 92, 40, 40);

        DayDisplay2.setText("Hour:");
        TimerAdvanceSetterDiag.getContentPane().add(DayDisplay2);
        DayDisplay2.setBounds(150, 92, 40, 40);

        jLabel1.setText("Desired Temperature in °C");
        TimerAdvanceSetterDiag.getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 220, 130, 14);

        DesiredTempJtex.setForeground(new java.awt.Color(204, 204, 204));
        DesiredTempJtex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesiredTempJtexActionPerformed(evt);
            }
        });
        TimerAdvanceSetterDiag.getContentPane().add(DesiredTempJtex);
        DesiredTempJtex.setBounds(20, 240, 100, 20);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TimerSetterBG.png"))); // NOI18N
        TimerAdvanceSetterDiag.getContentPane().add(jLabel3);
        jLabel3.setBounds(4, 4, 243, 270);

        AdminAcessDiag.setPreferredSize(new java.awt.Dimension(200, 320));
        AdminAcessDiag.getContentPane().setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/1.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton1);
        jButton1.setBounds(6, 60, 52, 51);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/2.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton2);
        jButton2.setBounds(67, 60, 52, 51);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/3.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton3);
        jButton3.setBounds(127, 60, 52, 51);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/6.png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton6);
        jButton6.setBounds(127, 115, 52, 51);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/7.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton7);
        jButton7.setBounds(6, 170, 52, 51);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/8.png"))); // NOI18N
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton8);
        jButton8.setBounds(67, 170, 52, 51);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/9.png"))); // NOI18N
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton9);
        jButton9.setBounds(127, 170, 52, 51);

        jButton0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/0.png"))); // NOI18N
        jButton0.setBorderPainted(false);
        jButton0.setContentAreaFilled(false);
        jButton0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton0ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton0);
        jButton0.setBounds(67, 225, 52, 51);

        jButtonCancle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/cancle.png"))); // NOI18N
        jButtonCancle.setBorderPainted(false);
        jButtonCancle.setContentAreaFilled(false);
        jButtonCancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancleActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButtonCancle);
        jButtonCancle.setBounds(6, 225, 52, 51);

        jButtonEnter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/enter.png"))); // NOI18N
        jButtonEnter.setBorderPainted(false);
        jButtonEnter.setContentAreaFilled(false);
        jButtonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnterActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButtonEnter);
        jButtonEnter.setBounds(127, 225, 52, 51);

        PSDisplay.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        AdminAcessDiag.getContentPane().add(PSDisplay);
        PSDisplay.setBounds(13, 10, 158, 40);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/4.png"))); // NOI18N
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton4);
        jButton4.setBounds(7, 117, 52, 51);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/5.png"))); // NOI18N
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        AdminAcessDiag.getContentPane().add(jButton5);
        jButton5.setBounds(67, 117, 52, 51);

        PCBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/PCBG.png"))); // NOI18N
        AdminAcessDiag.getContentPane().add(PCBG);
        PCBG.setBounds(0, 0, 190, 290);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 800));

        jPanel1.setPreferredSize(new java.awt.Dimension(600, 800));
        jPanel1.setLayout(null);

        FanDisplay.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        FanDisplay.setForeground(new java.awt.Color(102, 102, 102));
        FanDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FanDisplay.setToolTipText("");
        jPanel1.add(FanDisplay);
        FanDisplay.setBounds(320, 270, 90, 20);

        ModeDisplay.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        ModeDisplay.setForeground(new java.awt.Color(102, 102, 102));
        ModeDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ModeDisplay.setToolTipText("");
        jPanel1.add(ModeDisplay);
        ModeDisplay.setBounds(200, 270, 90, 20);

        TimeDateLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        TimeDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(TimeDateLabel);
        TimeDateLabel.setBounds(20, 10, 560, 20);

        TemperatureOutsideInfo.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        TemperatureOutsideInfo.setForeground(new java.awt.Color(102, 102, 102));
        TemperatureOutsideInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TemperatureOutsideInfo.setText("0°");
        jPanel1.add(TemperatureOutsideInfo);
        TemperatureOutsideInfo.setBounds(490, 160, 100, 32);

        TemperatureInsideInfo.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        TemperatureInsideInfo.setForeground(new java.awt.Color(102, 102, 102));
        TemperatureInsideInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TemperatureInsideInfo.setText("0°");
        jPanel1.add(TemperatureInsideInfo);
        TemperatureInsideInfo.setBounds(10, 160, 100, 32);

        TemperatureDisplay.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        TemperatureDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TemperatureDisplay.setText("0°");
        jPanel1.add(TemperatureDisplay);
        TemperatureDisplay.setBounds(220, 170, 160, 110);

        Timer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TimerIconAD.png"))); // NOI18N
        Timer.setBorderPainted(false);
        Timer.setContentAreaFilled(false);
        Timer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimerActionPerformed(evt);
            }
        });
        jPanel1.add(Timer);
        Timer.setBounds(40, 669, 80, 80);

        Optimum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OptimumIcon.png"))); // NOI18N
        Optimum.setBorderPainted(false);
        Optimum.setContentAreaFilled(false);
        Optimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptimumActionPerformed(evt);
            }
        });
        jPanel1.add(Optimum);
        Optimum.setBounds(489, 681, 100, 70);

        FOnFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OnIcon.png"))); // NOI18N
        FOnFan.setBorderPainted(false);
        FOnFan.setContentAreaFilled(false);
        FOnFan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FOnFanActionPerformed(evt);
            }
        });
        jPanel1.add(FOnFan);
        FOnFan.setBounds(339, 589, 110, 80);

        FAutoFan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AutoIcon.png"))); // NOI18N
        FAutoFan.setBorderPainted(false);
        FAutoFan.setContentAreaFilled(false);
        FAutoFan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FAutoFanActionPerformed(evt);
            }
        });
        jPanel1.add(FAutoFan);
        FAutoFan.setBounds(131, 589, 140, 80);

        BTempType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/TempTypeIcon.png"))); // NOI18N
        BTempType.setBorderPainted(false);
        BTempType.setContentAreaFilled(false);
        BTempType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTempTypeActionPerformed(evt);
            }
        });
        jPanel1.add(BTempType);
        BTempType.setBounds(260, 280, 80, 60);

        Rooms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/Rooms.png"))); // NOI18N
        Rooms.setBorderPainted(false);
        Rooms.setContentAreaFilled(false);
        Rooms.setFocusPainted(false);
        Rooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomsActionPerformed(evt);
            }
        });
        jPanel1.add(Rooms);
        Rooms.setBounds(5, 44, 190, 79);

        Kitchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/kitchen.png"))); // NOI18N
        Kitchen.setBorderPainted(false);
        Kitchen.setContentAreaFilled(false);
        Kitchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KitchenActionPerformed(evt);
            }
        });
        jPanel1.add(Kitchen);
        Kitchen.setBounds(205, 43, 190, 80);

        LivingRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LivingRoom.png"))); // NOI18N
        LivingRoom.setContentAreaFilled(false);
        LivingRoom.setDefaultCapable(false);
        LivingRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LivingRoomActionPerformed(evt);
            }
        });
        jPanel1.add(LivingRoom);
        LivingRoom.setBounds(405, 44, 190, 79);

        DecreaseTemp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/MinusIcon.png"))); // NOI18N
        DecreaseTemp.setBorderPainted(false);
        DecreaseTemp.setContentAreaFilled(false);
        DecreaseTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecreaseTempActionPerformed(evt);
            }
        });
        jPanel1.add(DecreaseTemp);
        DecreaseTemp.setBounds(72, 208, 80, 90);

        IncreaseTemp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/PlusIcon.png"))); // NOI18N
        IncreaseTemp.setBorderPainted(false);
        IncreaseTemp.setContentAreaFilled(false);
        IncreaseTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncreaseTempActionPerformed(evt);
            }
        });
        jPanel1.add(IncreaseTemp);
        IncreaseTemp.setBounds(447, 213, 80, 80);

        MCool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/CoolIcon.png"))); // NOI18N
        MCool.setBorderPainted(false);
        MCool.setContentAreaFilled(false);
        MCool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCoolActionPerformed(evt);
            }
        });
        jPanel1.add(MCool);
        MCool.setBounds(362, 432, 80, 80);

        MOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/OffIcon.png"))); // NOI18N
        MOff.setBorderPainted(false);
        MOff.setContentAreaFilled(false);
        MOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOffActionPerformed(evt);
            }
        });
        jPanel1.add(MOff);
        MOff.setBounds(262, 432, 80, 80);

        MHeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/HeatIcon.png"))); // NOI18N
        MHeat.setBorderPainted(false);
        MHeat.setContentAreaFilled(false);
        MHeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MHeatActionPerformed(evt);
            }
        });
        jPanel1.add(MHeat);
        MHeat.setBounds(162, 432, 80, 80);

        LockIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LockIcon.png"))); // NOI18N
        LockIcon.setBorderPainted(false);
        LockIcon.setContentAreaFilled(false);
        LockIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LockIconActionPerformed(evt);
            }
        });
        jPanel1.add(LockIcon);
        LockIcon.setBounds(259, 702, 80, 60);

        BG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/AirconUI.png"))); // NOI18N
        jPanel1.add(BG);
        BG.setBounds(0, 0, 600, 800);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void KitchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KitchenActionPerformed
        Zone = "kitchen";
        refresher();        // TODO add your handling code here:
    }//GEN-LAST:event_KitchenActionPerformed

    private void LivingRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LivingRoomActionPerformed
        Zone = "livingroom";
        refresher();        // TODO add your handling code here:
    }//GEN-LAST:event_LivingRoomActionPerformed

    private void DecreaseTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecreaseTempActionPerformed
        if (Zone == "rooms") {
            rooms.decreaseDesiredTemperature();
        } else if (Zone == "kitchen") {
            kitchen.decreaseDesiredTemperature();

        } else if (Zone == "livingroom") {
            livingroom.decreaseDesiredTemperature();
        }
        refresher();
        Rcheck = false;
        Kcheck = false;
        Lcheck = false;// TODO add your handling code here:
    }//GEN-LAST:event_DecreaseTempActionPerformed

    private void IncreaseTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncreaseTempActionPerformed
        if (Zone == "rooms") {
            rooms.increaseDesiredTemperature();
        } else if (Zone == "kitchen") {
            kitchen.increaseDesiredTemperature();
        } else if (Zone == "livingroom") {
            livingroom.increaseDesiredTemperature();
        }

        refresher();
        Rcheck = false;
        Kcheck = false;
        Lcheck = false;// TODO add your handling code here:
    }//GEN-LAST:event_IncreaseTempActionPerformed

    private void BTempTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTempTypeActionPerformed
        if (Zone == "rooms") {
            if (rooms.getTempType() == "C") {
                //(32°C * 9/5) + 32 = 89.6°F formula converting from c to f
                rooms.setDesiredTemperature((rooms.getDesiredTemperature() * 9 / 5) + 32);
                rooms.setTemperatureOutside((rooms.getTemperatureOutside() * 9 / 5) + 32);
                rooms.setTemperatureInside((rooms.getTemperatureInside() * 9 / 5) + 32);
                rooms.setTempType("F");
            } else if (rooms.getTempType() == "F") {
                //(32°F - 32) * 5/9 = 0°C formula converting from f to c
                rooms.setDesiredTemperature((rooms.getDesiredTemperature() - 32) * 5 / 9);
                rooms.setTemperatureOutside((rooms.getTemperatureOutside() - 32) * 5 / 9);
                rooms.setTemperatureInside((rooms.getTemperatureInside() - 32) * 5 / 9);
                rooms.setTempType("C");
            }
        } else if (Zone == "kitchen") {
            if (kitchen.getTempType() == "C") {
                //(32°C * 9/5) + 32 = 89.6°F formula converting from c to f
                kitchen.setDesiredTemperature((kitchen.getDesiredTemperature() * 9 / 5) + 32);
                kitchen.setTemperatureOutside((kitchen.getTemperatureOutside() * 9 / 5) + 32);
                kitchen.setTemperatureInside((kitchen.getTemperatureInside() * 9 / 5) + 32);
                kitchen.setTempType("F");
            } else if (kitchen.getTempType() == "F") {
                //(32°F - 32) * 5/9 = 0°C formula converting from f to c
                kitchen.setDesiredTemperature((kitchen.getDesiredTemperature() - 32) * 5 / 9);
                kitchen.setTemperatureOutside((kitchen.getTemperatureOutside() - 32) * 5 / 9);
                kitchen.setTemperatureInside((kitchen.getTemperatureInside() - 32) * 5 / 9);
                kitchen.setTempType("C");
            }
        } else if (Zone == "livingroom") {
            if (livingroom.getTempType() == "C") {
                //(32°C * 9/5) + 32 = 89.6°F formula converting from c to f
                livingroom.setDesiredTemperature((livingroom.getDesiredTemperature() * 9 / 5) + 32);
                livingroom.setTemperatureOutside((livingroom.getTemperatureOutside() * 9 / 5) + 32);
                livingroom.setTemperatureInside((livingroom.getTemperatureInside() * 9 / 5) + 32);
                livingroom.setTempType("F");
            } else if (livingroom.getTempType() == "F") {
                //(32°F - 32) * 5/9 = 0°C formula converting from f to c
                livingroom.setDesiredTemperature((livingroom.getDesiredTemperature() - 32) * 5 / 9);
                livingroom.setTemperatureOutside((livingroom.getTemperatureOutside() - 32) * 5 / 9);
                livingroom.setTemperatureInside((livingroom.getTemperatureInside() - 32) * 5 / 9);
                livingroom.setTempType("C");
            }
        }
        refresher();        // TODO add your handling code here:
    }//GEN-LAST:event_BTempTypeActionPerformed

    private void MCoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCoolActionPerformed
        if (Zone == "rooms") {
            rooms.setMode("cool");
            if (rooms.getTempType() == "F") {
                rooms.setDesiredTemperature(61);
            } else if (rooms.getTempType() == "C") {
                rooms.setDesiredTemperature(16);
            }
        } else if (Zone == "kitchen") {
            kitchen.setMode("cool");
            if (kitchen.getTempType() == "F") {
                kitchen.setDesiredTemperature(61);
            } else if (kitchen.getTempType() == "C") {
                kitchen.setDesiredTemperature(16);
            }
        } else if (Zone == "livingroom") {
            livingroom.setMode("cool");
            if (livingroom.getTempType() == "F") {
                livingroom.setDesiredTemperature(61);
            } else if (livingroom.getTempType() == "C") {
                livingroom.setDesiredTemperature(16);
            }
        }
        refresher();  // TODO add your handling code here:
    }//GEN-LAST:event_MCoolActionPerformed

    private void MOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOffActionPerformed
        if (Zone == "rooms") {
            rooms.setMode("off");
            if (rooms.getTempType() == "F") {
                rooms.setDesiredTemperature(rooms.getTemperatureOutside());
            } else if (rooms.getTempType() == "C") {
                rooms.setDesiredTemperature(rooms.getTemperatureOutside());
            }
        } else if (Zone == "kitchen") {
            kitchen.setMode("off");
            if (kitchen.getTempType() == "F") {
                kitchen.setDesiredTemperature(kitchen.getTemperatureOutside());
            } else if (kitchen.getTempType() == "C") {
                kitchen.setDesiredTemperature(kitchen.getTemperatureOutside());
            }
        } else if (Zone == "livingroom") {
            livingroom.setMode("off");
            if (livingroom.getTempType() == "F") {
                livingroom.setDesiredTemperature(livingroom.getTemperatureOutside());
            } else if (livingroom.getTempType() == "C") {
                livingroom.setDesiredTemperature(livingroom.getTemperatureOutside());
            }
        }
        refresher();// TODO add your handling code here:
    }//GEN-LAST:event_MOffActionPerformed

    private void MHeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MHeatActionPerformed
        if (Zone == "rooms") {
            rooms.setMode("heat");
            if (rooms.getTempType() == "F") {
                rooms.setDesiredTemperature(89.6);
            } else if (rooms.getTempType() == "C") {
                rooms.setDesiredTemperature(32);
            }
        } else if (Zone == "kitchen") {
            kitchen.setMode("heat");
            if (kitchen.getTempType() == "F") {
                kitchen.setDesiredTemperature(89.6);
            } else if (kitchen.getTempType() == "C") {
                kitchen.setDesiredTemperature(32);
            }
        } else if (Zone == "livingroom") {
            livingroom.setMode("heat");
            if (livingroom.getTempType() == "F") {
                livingroom.setDesiredTemperature(89.6);
            } else if (livingroom.getTempType() == "C") {
                livingroom.setDesiredTemperature(32);
            }
        }
        refresher();

// TODO add your handling code here:
    }//GEN-LAST:event_MHeatActionPerformed

    private void FAutoFanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FAutoFanActionPerformed
        if (Zone == "rooms") {
            rooms.setFan("auto");
        } else if (Zone == "kitchen") {
            kitchen.setFan("auto");
        } else if (Zone == "livingroom") {
            livingroom.setFan("auto");
        }
        refresher();    // TODO add your handling code here:
    }//GEN-LAST:event_FAutoFanActionPerformed

    private void FOnFanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FOnFanActionPerformed
        if (Zone == "rooms") {
            rooms.setFan("on");
        } else if (Zone == "kitchen") {
            kitchen.setFan("on");
        } else if (Zone == "livingroom") {
            livingroom.setFan("on");
        }
        refresher();// TODO add your handling code here:
    }//GEN-LAST:event_FOnFanActionPerformed

    private void TimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimerActionPerformed
        if (lock) {
            TimerAdvanceSetterDiag.pack();
            TimerAdvanceSetterDiag.setLocationRelativeTo(this);
            TimerAdvanceSetterDiag.setVisible(true);
            refresher();
        } else {
            AdminAcessDiag.pack();
            AdminAcessDiag.setLocationRelativeTo(this);
            AdminAcessDiag.setVisible(true);
            refresher();
        }
        //TimerAdvanceSetterDiag.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_TimerActionPerformed

    private void LockIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LockIconActionPerformed
        if (lock) {
            LockIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/LockIcon.png")));
            lock = false;
            refresher();
        } else {

            AdminAcessDiag.pack();
            AdminAcessDiag.setLocationRelativeTo(this);
            AdminAcessDiag.setVisible(true);
            refresher();
        }
        //AdminAcessDiag.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_LockIconActionPerformed

    private void RoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomsActionPerformed

        Zone = "rooms";
        refresher();
// TODO add your handling code here:
    }//GEN-LAST:event_RoomsActionPerformed

    private void OptimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptimumActionPerformed
        if (Zone == "rooms") {
            rooms.setFan("auto");
            if (rooms.getTempType() == "F") {
                rooms.setDesiredTemperature(78);
            } else if (rooms.getTempType() == "C") {
                rooms.setDesiredTemperature(26);
            }
        } else if (Zone == "kitchen") {
            kitchen.setFan("auto");
            if (kitchen.getTempType() == "F") {
                kitchen.setDesiredTemperature(78);
            } else if (kitchen.getTempType() == "C") {
                kitchen.setDesiredTemperature(26);
            }
        } else if (Zone == "livingroom") {
            livingroom.setFan("auto");
            if (livingroom.getTempType() == "F") {
                livingroom.setDesiredTemperature(78);
            } else if (livingroom.getTempType() == "C") {
                livingroom.setDesiredTemperature(26);
            }
        }
        refresher();   // TODO add your handling code here:
    }//GEN-LAST:event_OptimumActionPerformed

    private void jButtonCancleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancleActionPerformed
        AdminAcessDiag.dispose();
        TypedPassword = "";

        refresher();// TODO add your handling code here:
    }//GEN-LAST:event_jButtonCancleActionPerformed

    private void jButtonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnterActionPerformed
        if (TypedPassword.equals(Password)) {
            lock = true;
            TypedPassword = "";
            AdminAcessDiag.dispose();
            LockIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/airconUI/UnLockIcon.png")));
            refresher();
        } else {
            JOptionPane.showMessageDialog(null, "Access Denied");
            TypedPassword = "";
            refresher();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEnterActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        TypedPassword += "1";
        PasswordTyper();// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        TypedPassword += "2";
        PasswordTyper();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        TypedPassword += "3";
        PasswordTyper();// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        TypedPassword += "4";
        PasswordTyper();       // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        TypedPassword += "5";
        PasswordTyper();      // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        TypedPassword += "6";
        PasswordTyper();     // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        TypedPassword += "7";
        PasswordTyper();       // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        TypedPassword += "8";
        PasswordTyper();       // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        TypedPassword += "9";
        PasswordTyper();      // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton0ActionPerformed
        TypedPassword += "0";
        PasswordTyper();     // TODO add your handling code here:
    }//GEN-LAST:event_jButton0ActionPerformed

    private void DayPlusPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayPlusPlusActionPerformed
        dayDisplay += 1;
        DayDisplay.setText(Integer.toString(dayDisplay));        // TODO add your handling code here:
    }//GEN-LAST:event_DayPlusPlusActionPerformed

    private void DayMinusMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayMinusMinusActionPerformed

        dayDisplay -= 1;
        DayDisplay.setText(Integer.toString(dayDisplay));         // TODO add your handling code here:
    }//GEN-LAST:event_DayMinusMinusActionPerformed

    private void HoursPlusPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoursPlusPlusActionPerformed
        hourDisplay += 1;
        HourDisplay.setText(Integer.toString(hourDisplay));         // TODO add your handling code here:
    }//GEN-LAST:event_HoursPlusPlusActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (Integer.parseInt(DesiredTempJtex.getText()) > 32 || Integer.parseInt(DesiredTempJtex.getText()) < 16) {
            JOptionPane.showMessageDialog(null, "Reenter Desired Temperature");
        } else {
            if (hourDisplay < 10 && dayDisplay < 10) {
                AdvanceSettings.add("0" + DayDisplay.getText() + "0" + HourDisplay.getText());
                AdvanceSettings.add(DesiredTempJtex.getText());
                breaker = true;
            } else if (dayDisplay < 10 && hourDisplay > 10) {
                AdvanceSettings.add("0" + DayDisplay.getText() + "" + HourDisplay.getText());
                AdvanceSettings.add(DesiredTempJtex.getText());
                breaker = true;
            } else if (dayDisplay > 10 && hourDisplay < 10) {
                AdvanceSettings.add(DayDisplay.getText() + "0" + HourDisplay.getText());
                AdvanceSettings.add(DesiredTempJtex.getText());
                breaker = true;
            } else {
                AdvanceSettings.add(DayDisplay.getText() + "" + HourDisplay.getText());
                AdvanceSettings.add(DesiredTempJtex.getText());
                breaker = true;
            }

            hourDisplay = 0;
            dayDisplay = 0;
            HourDisplay.setText(Integer.toString(hourDisplay));
            DayDisplay.setText(Integer.toString(dayDisplay));
            TimerAdvanceSetterDiag.dispose();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void HoursMinusMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoursMinusMinusActionPerformed
        hourDisplay -= 1;
        HourDisplay.setText(Integer.toString(hourDisplay));        // TODO add your handling code here:
    }//GEN-LAST:event_HoursMinusMinusActionPerformed

    private void DesiredTempJtexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesiredTempJtexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DesiredTempJtexActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirconUi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirconUi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirconUi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirconUi.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirconUi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AdminAcessDiag;
    private javax.swing.JLabel BG;
    private javax.swing.JButton BTempType;
    private javax.swing.JLabel DayDisplay;
    private javax.swing.JLabel DayDisplay1;
    private javax.swing.JLabel DayDisplay2;
    private javax.swing.JButton DayMinusMinus;
    private javax.swing.JButton DayPlusPlus;
    private javax.swing.JButton DecreaseTemp;
    private javax.swing.JTextField DesiredTempJtex;
    private javax.swing.JButton FAutoFan;
    private javax.swing.JButton FOnFan;
    private javax.swing.JLabel FanDisplay;
    private javax.swing.JLabel HourDisplay;
    private javax.swing.JButton HoursMinusMinus;
    private javax.swing.JButton HoursPlusPlus;
    private javax.swing.JButton IncreaseTemp;
    private javax.swing.JButton Kitchen;
    private javax.swing.JButton LivingRoom;
    private javax.swing.JButton LockIcon;
    private javax.swing.JButton MCool;
    private javax.swing.JButton MHeat;
    private javax.swing.JButton MOff;
    private javax.swing.JLabel ModeDisplay;
    private javax.swing.JButton Optimum;
    private javax.swing.JLabel PCBG;
    private javax.swing.JLabel PSDisplay;
    private javax.swing.JButton Rooms;
    private javax.swing.JLabel TemperatureDisplay;
    private javax.swing.JLabel TemperatureInsideInfo;
    private javax.swing.JLabel TemperatureOutsideInfo;
    private javax.swing.JLabel TimeDateLabel;
    private javax.swing.JButton Timer;
    private javax.swing.JDialog TimerAdvanceSetterDiag;
    private javax.swing.JButton jButton0;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonCancle;
    private javax.swing.JButton jButtonEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override

    public void run() {
        while (true) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("E, MMM dd yyyy");
            DateTimeFormatter Advance = DateTimeFormatter.ofPattern("ddHH");
            DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("HH:mm:ss");
            DateTimeFormatter SeccondsCounter = DateTimeFormatter.ofPattern("ss");
            hoursCounter = DateTimeFormatter.ofPattern("HH");
            LocalDateTime now = LocalDateTime.now();
            int SeccondsCounterN = Integer.parseInt(SeccondsCounter.format(now));
            hoursCounterN = Integer.parseInt(hoursCounter.format(now));
            TimeDateLabel.setText(dtf.format(now) + " " + dtf1.format(now));

            if (SeccondsCounterN % 5 == 0 || SeccondsCounterN == 00) {
                if (Lcheck != true || Rcheck != true || Kcheck != true) {
                    tempSetter();
                    refresher();

                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    System.out.println("error");
                }
            }
            if (breaker) {
                String test = "";
                try {
                    for (String i : AdvanceSettings) {
                        if (i.contains(Advance.format(now))) {
                            test = i;
                            System.out.println(test + " " + Advance.format(now));
                            AdvanceSettings.removeIf(n -> (n.contains(Advance.format(now))));
                        } else {
                            System.out.println(i);
                            advanceTempSetter(i);
                            AdvanceSettings.removeIf(n -> (n.contains(i)));
                            breaker = false;
                        }
                    }
                } catch (Exception e) {
                   
                }
            }

        }

    }
}
